Motivera varför era förbättringar verkligen är förbättringar
-SoC is improved as Simulation Logic and UI logic has been sperated. and also Drawing logic
	-> CarController is split into SimulationController and CarController(handles now only UI)
	-> DrawPanel split into CarRenderer and WorkshopRenderer

-SRP improved as each class has a single responsibility
	-> SimulationController handles simulation
	-> CarController handles UI
	-> CarRenderer and WorkshopRenderer handle the drawing

-now dependencies are based on abstract classes. This means that changing one class is less likely to affect other classes. This also means you its easier to replace/extend classes/methods

-as classes are more isolated and have a more focused function they are easier to test


Skriv en refaktoriseringsplan.

1) skapa interfaces -> ICar, IWorkshop, IDrawable
2)split CarController into SimulationController and CarController
3) split CarView into MainView and EventView
4) split DrawPanel into CarRenderer and WorkshopRenderer
5) uppdatera resten av Coden:
	Car, Volvo, Saab, Scania & Truck så att dom implementerar ICar
	Bilverstad implements IWorkshop
	DrawPanel now uses CarRenderer and WorkshopRenderer
6)Tests



Finns det några delar av planen som går att utföra parallellt?

ja, man kann skriva abstrakta klasserna samtidigt som man delar up CarController och DrawPanel. Men man kann inte skriva om coden & testa coden samtidigt
